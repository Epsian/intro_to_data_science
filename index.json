[{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/install_guide/git/","title":"git/GitHub","tags":[],"description":"","content":" Overview git on Windows git on Mac Overview git is a tool for version control and collaboration. It is the tool used by data science teams big and small to keep track of code. Think of it like track changes in Word or Google docs, but for code files.\ngit on Windows Follow these step-by-step instructions if you\u0026rsquo;re installing Git on a Windows machine:\nFirst, launch a web browser, the image below shows the Microsoft Edge browser.\nNext, navigate to the following Git download URL in your browser https://git-scm/com/downloads.\nSelect \u0026ldquo;Windows\u0026rdquo; from the Downloads portion of the Git webpage. Git will display the following page and automatically being downloading the correct version of the Git software. If the download doesn\u0026rsquo;t start automatically, click on the \u0026ldquo;Click here to download manually link.\u0026rdquo;\nWhen the download is complete, open/Run the downloaded file (it may look different in different browsers).\nA screen will appear asking for permissions for the Git application to make changes to your device. Click on the Yes button.\nClick Next to accept the user license.\nLeave the default \u0026ldquo;Destination Location\u0026rdquo; unchanged (usually C:\\Program Files\\Git) and hit Next\nYou will see a screen like the one below asking you to \u0026ldquo;Select Components.\u0026rdquo; Leave all of the default components selected. You can also check the boxes next to \u0026ldquo;Additional Icons\u0026rdquo; and it\u0026rsquo;s sub-item, \u0026ldquo;On the Desktop\u0026rdquo; if you would like. Your completed configurations window should have the following components selected:\nAdditional Icons -\u0026gt; On the Desktop Windows Explorer integration -\u0026gt; Git Bash Here -\u0026gt; Git GUI Here Git LFS (Large File Support) Associate .git* configuration files with default text editor Associate .sh files to be run with Bash The next screen will ask you to pick a \u0026ldquo;default editor, click the drop down box and select\u0026quot;Use the Nano editor by default.\u0026rdquo; The press Next.\nOn the next screen, it will ask to override the default \u0026ldquo;branch name.\u0026rdquo; Select the \u0026ldquo;Override the default branch name for new repositories\u0026rdquo; option, and in the text box type \u0026ldquo;main.\u0026rdquo; Press Next.\nThe next screen will ask you if you want to adjust your path environment. Leave the default of \u0026ldquo;Git from the command line and also from 3rd-party software.\u0026rdquo; Press Next.\nOn the next screen, keep the default option of \u0026ldquo;Use bundled OpenSSH.\u0026rdquo; Press Next\nOn the next screen, keep the default option of \u0026ldquo;Use the OpenSSL library.\u0026rdquo; Press Next.\nLeave the default \u0026ldquo;Checkout Windows-style, commit Unix-style line endings\u0026rdquo; selected on the next page and hit Next:\nKeep the default \u0026ldquo;Use MinTTY (the default terminal of MSYS2)\u0026rdquo; selected on the \u0026ldquo;Configuring the terminal emulator to use with Git Bash\u0026rdquo; window and hit Next:\nKeep the default value of \u0026ldquo;Default (fast-forward or merge)\u0026rdquo; on the \u0026ldquo;Choose the default behavior of \u0026lsquo;git pull\u0026rsquo;\u0026rdquo; page and hit Next:\nKeep the default value of \u0026ldquo;Git Credential Manager Core\u0026rdquo; on the \u0026ldquo;Choose a credential helper\u0026rdquo; page and hit Next:\nKeep the default values on the \u0026ldquo;Configuration extra options\u0026rdquo; page by keeping \u0026ldquo;Enable file system caching\u0026rdquo; checked and \u0026ldquo;Enable symbolic links\u0026rdquo; unchecked and then hit Next:\nMake sure that no options are checked in the \u0026ldquo;Configuring experimental options\u0026rdquo; page and hit Install:\nAfter you hit this Install button as per above, you will see an install progress screen like the one below:\nWhen the install is complete, a new, \u0026ldquo;Completing the Git Setup Wizard\u0026rdquo; window like the one below will appear:\nMake sure that all of the options on this window are unchecked as in the image below and then hit the Finish button:\nThis will complete your installation process.\ngit on Mac Thanks to the UC Davis DataLab\u0026rsquo;s Install Guide for providing the basis of this guide.\n"},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/labs/0_problem_solving/","title":"Problem Solving","tags":[],"description":"","content":" Introduction Learning Goals Interpreting Error Messages Preparing to Get Help Referencing Resources Help pages Cheatsheets Searching the Web This lab is a copy of SDS professor Dr.Â Lindsay Poirier\u0026rsquo;s problem solving lab.\nIntroduction This lab will introduce you to resources and techniques for problem solving in R. You should reference this lab often throughout the semester for reminders on best practices for addressing errors and getting help.\nLearning Goals Interpret error messages in R Read R cheatsheets Access R help pages Reference Stack Overflow and other online resources for help Interpreting Error Messages Throughout this week, we have taken a look at different error messages that R presents when it can\u0026rsquo;t evaluate our code. Today, we will consider these in more detail. First, it\u0026rsquo;s important to make some distinctions between the kinds of messages that R presents to us when attempting to run code:\nErrors Terminate a process that we are trying to run in R. They arise when it is not possible for R to continue evaluating a function.\nWarnings Don\u0026rsquo;t terminate a process but are meant to warn us that there may be an issue with our code and its output. They arise when R recognizes potential problems with the code we\u0026rsquo;ve supplied.\nMessages Also don\u0026rsquo;t terminate a process and don\u0026rsquo;t necessarily indicate a problem but simply provide us with more potentially helpful information about the code we\u0026rsquo;ve supplied.\nCheck out the differences between an error and a warning in R by reviewing the output in the Console when you run the following code chunks.\nError in R sum(\u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;) Error in sum(\u0026quot;3\u0026quot;, \u0026quot;4\u0026quot;): invalid 'type' (character) of argument Warning in R vector1 \u0026lt;- 1:5 vector2 \u0026lt;- 3:6 vector1 + vector2 Warning in vector1 + vector2: longer object length is not a multiple of shorter object length [1] 4 6 8 10 8 So what should you do when you get an error message? How should you interpret it? Luckily, there are some clues and standardized components of the message the indicate why R can\u0026rsquo;t execute the code. Consider the following error message that you received when running the code above:\nError in sum(\u0026ldquo;3\u0026rdquo;, \u0026ldquo;4\u0026rdquo;) : invalid \u0026rsquo;type\u0026rsquo; (character) of argument\nThere are three things we should pay attention to in this message:\nThe word \u0026ldquo;Error\u0026rdquo; indicates that this code did not run. The text immediately after the word \u0026ldquo;in\u0026rdquo; tells us which specific function did not run. The text after the colon gives us clues as why the code did not run. Reviewing the error above, I can guess that there was a problem with the argument that I supplied to the sum() function, and specifically that I supplied a function of the wrong type.\nExercise 1\nRun the codes below and check out the error messages. Review the code to fix each of the errors. Note that each subsequent code chunk relies on the previous code chunk, so you will need to fix the errors in order and run the chunks in order.\n# Create three vectors a \u0026lt;- 1, 2, 3, 4, 5 b \u0026lt;- \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34; c \u0026lt;- TRUE, FALSE, TRUE, TRUE, FALSE Error: \u0026lt;text\u0026gt;:2:7: unexpected ',' 1: # Create three vectors 2: a \u0026lt;- 1, ^ # Add the values in the vector a a_added \u0026lt;- add(a) Error in add(a): could not find function \u0026quot;add\u0026quot; # Multiply the previous output by 3 three_times_a_added \u0026lt;- added_a * 3 Error in eval(expr, envir, enclos): object 'added_a' not found # Create a dataframe with col1 and col2 df \u0026lt;- data.frame( col1 = c(1, 2, 3) col2 = c(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;) Error: \u0026lt;text\u0026gt;:4:3: unexpected symbol 3: col1 = c(1, 2, 3) 4: col2 ^ # Add a new column to df df$col3 \u0026lt;- c(TRUE, FALSE) Error in df$col3 \u0026lt;- c(TRUE, FALSE): object of type 'closure' is not subsettable Preparing to Get Help When we do get errors in our code and need to ask for help in interpreting them, it\u0026rsquo;s important to provide collaborators with the information they need to help us. Sometimes when teaching R I will hear things like: \u0026ldquo;My code doesn\u0026rsquo;t work!\u0026rdquo; or \u0026ldquo;I\u0026rsquo;m stuck and don\u0026rsquo;t know what to do,\u0026rdquo; and it can be challenging to suss out the root of the issue without more information. Here are some strategies for describing issues you are having with your code:\nReference line numbers. Notice the left side of this document has a series of numbers listed vertically next to each line? These are known as line numbers. Oftentimes, if you are having an issue with your code and ask me to review it, I will say something like: \u0026ldquo;Check out line 53.\u0026rdquo; By this I mean that you should scroll the document to the 53rd line. You can similarly tell me or your peers which line of your code you are struggling with.\nCompose good reproducible examples. A good reproducible example includes all of the lines of code that we need to reproduce an output on our own machines. This means that if you create a vector in a previous code snippet and then supply it as an argument in another code snippet, you are going to want to make sure that both of these lines of code appear in your reproducible example. Further, if the functions that you are using are from certain packages, you will want to make sure the library() call to load that package is in your reproducible example.\nUse the code and code block buttons in Slack to share example code. First, when we copy and paste code from RStudio into programs like Slack and email, we can\u0026rsquo;t see the output. Second, certain characters like quotation marks and apostrophes are treated differently across these programs. For example, run the code chunk below and check out the output in your Console. The first line of code I typed directly into RStudio. The second I copied over from Slack.\n# typed directly into RStudio toupper(\u0026#34;apple\u0026#34;) # copied from Slack toupper(âappleâ) Error: \u0026lt;text\u0026gt;:4:9: unexpected input 3: # copied from Slack 4: toupper(â ^ Notice the slight differences in the quotation marks? R recognizes the first but doesn\u0026rsquo;t recognize the second, even though I used the same keyboard key to create both. This is due to the fact that these two systems use different character encodings.\nThe Code button (for a single line of code) and Code Block button (for multiple lines of code) in Slack are useful tools for composing code and avoiding character encoding issues. If you click these buttons when typing a Slack message, you can enter code in the red outlined box that appears, and this will easily copy to RStudio. I will ask you to always use these features when copying code this semester.\nTip\nIn Slack, you can also wrap text backticks (` `) to have it output in a single-line code block, and three backticks (``` ```) to have it output as a multi-line code block.\nExercise 2\nCopy and paste one line of code from this lab as a threaded comment on the Slack message I posted on September 7, 2022. Be sure the text is formatted as code.\nReferencing Resources As I\u0026rsquo;ve mentioned in class before, I don\u0026rsquo;t expect you to come away from this class memorizing every function that we discuss and all of their parameters. There are a number of resources available to help you recall how certain functions work.\nHelp pages One resource we\u0026rsquo;ve already discussed are the R help pages. I tend to use the help pages when I know the function I need to use, but can\u0026rsquo;t remember how to apply it or what its parameters are. Help pages typically include a description of the function, its arguments, details about the function, the values it produces, a list of related functions, and examples of its use. We can access the help pages for a function by typing the name of the function with a question mark in front of it into our Console (e.g.Â ?log or ?sum). Some help pages are well-written and include helpful examples, while others are spotty and don\u0026rsquo;t include many examples.\nExercise 3\nAccess the help pages for the function sort(). Write code below to sort the vector a (which you created in an earlier step) in decreasing order.\n# Write code here. Cheatsheets The R community has developed a series of cheatsheets that list the functions made available through a particular package and their arguments. I tend to use cheatsheets when I know what I need to do to a dataset in R, but I can\u0026rsquo;t recall the function that enables me to do it.\nExercise 4\nNavigate to this cheatsheet for base R. Imagine we collected the temperature of our home each day for the past ten days (see code below). Let\u0026rsquo;s say we wanted to find how each day ranked from coolest to hottest. For instance, I wanted to know the ranking for day 1 vs.Â day 2 vs.Â day 3, and so on. Using the cheatsheet, find the function that will allow you to generate a ranking of each day\u0026rsquo;s temperature. Search the help pages for this function to determine how to randomly rank two days with the same temperature. Write a comment to yourself describing how this function is different than sorting the data.\n#Create a vector of temperatures temps_to_factor \u0026lt;- c(68, 70, 78, 75, 69, 80, 66, 66, 79) # Write code below to rank the days with random ties # Replace this line with a comment to yourself describing how this function is different than sorting the data. Searching the Web I encourage you to search the web when you get errors in your code. Others have likely experienced that error before and gotten help from communities of data analysts and programmers. However, you should never copy and paste code directly from Stack Overflow. This violates the course policies on Academic Honesty. Instead you should use these resources to take notes and learn how to improve and revise code. Any time you reference Stack Overflow or any other Web resource to help you figure out an answer to a problem, you should cite that resource in your code. Here is how you would cite that post in APA format:\nUsername. (Year, Month Date). Title of page (Question/Topic). Stack Overflow. URL\nExercise 5\nAdd a comment to the code chunk above, citing this Stack Overflow post. Be sure to cite the post properly. You can read through the post to double check your answers.\n"},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/syllabus/","title":"Syllabus","tags":[],"description":"","content":" Course Description Course Structure Course Instructor Contacting Me Course Policies Required Materials Attendance Academic Honesty Code of Conduct Accommodation Grading Standards-Based Grading Standards Final Grades Late Work Policy FAQ Course Description Introduction to Data Science (SDS 192) aims to equip students with the knowledge and tools to understand, critically evaluate, manipulate, and explain data. This is an introductory course, and no prior experience is necessary1. Students will learn how to read and write code, but also how to create, organize, and collaborate on coding projects while critically examining the projects goals and data sources. We will be primarily using the R language, along with supplemental tools.\nCourse Structure Each week follows the same basic structure. Monday and Wednesday classes include lectures to introduce new concepts. Each lecture is followed by interactive problem sets designed to reinforce concepts through active learning. Slides from lecture will be posted online after class. The problem sets for any class are \u0026ldquo;due\u0026rdquo; at the start of the next class period when the answers will be released; most problem sets can be completed in class. In-class problem sets do not contribute toward your grade. They are intended to reinforce material and help you test your own understanding.\nFriday classes are devoted to lab activities or project work time. Students are expected to come to class for these activities. Labs include more involved problem sets that incorporate topics from the current and prior weeks. Students work on labs in groups of two to four people. Labs are reviewed through GitHub Classroom where feedback is provided.\nFor a full list of assignments and due dates, please see the course schedule.\nThis is a 4-credit course. You should be spending 12-hours total per week on this course. Expect to spend around 8.25 hours (12 hours - 3.75 hours/week of in-class instruction) on class material per week outside of class.\nCourse Instructor I am a sociologist that studies abuses of power in government. I earned my Ph.D.Â at the University of California, Davis in in sociology with a designated emphasis in computational social science. I combine computational methods such as social network analysis, natural language processing, geospatial analysis, and machine learning with open source and governmental data to uncover patterns of malfeasance and misfeasance by our public servants. From the political networks of politicians and prohibition gangsters to bias hidden in the text of academic recruitment, I use new methods to work on old problems of corruption and inequality.\nI am a visiting assistant professor in the Statistical \u0026amp; Data Sciences (SDS) program. I have experience working with both United States and United Kingdom governmental organizations applying machine learning to real-world problems. In the UK, I worked with the national lab for data science and machine learning, the Alan Turing Institute, on early-detection systems in foster care to assure children are receiving adequate services. Meanwhile in the US I worked with the Internal Revenue Service to build a machine learning system that determined the credibility of incoming fraud reports.\nContacting Me Slack Office Hours You can send me a message on the course Slack workspace, and I will respond when I am able, typically within 24 hours during the work week. To message me, click the + button next to \u0026ldquo;Direct Messages\u0026rdquo; and search for my name.\nIf your question is not sensitive in nature, consider putting it in the #coding-help or #course-help channel instead. There is a good chance one of your classmates will be able to answer before I can.\nSlack questions should be brief or administrative in nature. For more in-depth questions and troubleshooting please attend office hours.\nYou can schedule a meeting with me on Calendly. Drop-ins are welcome, but priority is given to those who make an appointment. Group appointments, to address a similar question, are welcome.\nIf you are coming to office hours with a coding question, make sure you have the code ready at the start of your appointment. Have your computer booted up and your project open.\nIf you cannot find an open time slot, please message me for an appointment. I will attempt to find a time that works for both of us.\nCourse Policies Required Materials Students are not expected to buy any materials for this course. Data science is built on free and open collaboration. There is no shortage of high-quality learning material available. This reader, as well as all assignments, are currently available for free.\nStudents are required to have a working computer (preferably a laptop) and reliable internet connection for this course. Any recent computer should be sufficient, with the notable exception of Chromebooks. Chromebooks lack access to the majority of the tools used by data scientists.\nIf you only have access to a Chromebook, please speak with me as soon as possible.\nAttendance I will not be taking attendance in this course, and you do not need to inform me when you will be absent. If you are sick, please stay home. Given the standards-based grading system (discussed below), no single class, assignment, or even quiz will negatively impact your grade. That said, it will be very difficult to keep up with course material without consistent attendance.\nIf you miss a class, you should contact a peer to discuss what was missed, and check the course reader website for any upcoming deadlines. I won\u0026rsquo;t have the capacity to re-deliver missed material in office hours.\nQuizzes cannot be made up after the open period has passed. If you have a known scheduling conflict with a quiz, please speak with me as soon as possible to arrange an alternative time.\nAcademic Honesty Data science is inherently collaborative, so I fully expect students to collaborate. You are encouraged to work together on most assignments\u0026mdash;ask questions on Slack, create study groups, and share helpful resources you find. However, anything you submit must be your own work. You need to be the person who writes the text and/or code. Multiple students should not submit identical work. Please note: The only avenue in which collaboration is not allowed is on quizzes.\nAll students, staff, and faculty are bound by the Smith College Honor Code:\nStudents and faculty at Smith are part of an academic community defined by its commitment to scholarship, which depends on scrupulous and attentive acknowledgement of all sources of information and honest and respectful use of college resources.\nSmith College expects all students to be honest and committed to the principles of academic and intellectual integrity in their preparation and submission of course work and examinations. All submitted work of any kind must be the original work of the student who must cite all the sources used in its preparation.\n-Smith Academic Honor Code Any cases of dishonesty or plagiarism will be reported to the Academic Honor Board. Examples of dishonesty or plagiarism include:\nSubmitting work completed by another student as your own. Copying and pasting text or code from sources without quoting and citing the author. Paraphrasing material from another source without citing the author. Failing to cite your sources correctly. Falsifying or misrepresenting information in submitted work. Paying another student or service to complete assignments for you. Learning to code is similar to learning a new language; you will only learn by doing. No amount of rote copying will advance you beyond the most elementary levels of understanding. Please keep this in mind.\nIf someone else helps you understand a concept better, give them a nod in the #shoutouts channel on Slack.\nCode of Conduct As participants in this course we are committed to making participation a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion. Examples of unacceptable behavior by participants in this course include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\nAs the instructor I have the right and responsibility to point out and stop behavior that is not aligned with this Code of Conduct. Participants who do not follow the Code of Conduct may be reprimanded for such behavior. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the instructor.\nAll students and the instructor are expected to adhere to this Code of Conduct in all settings for this course: seminars, office hours, and over Slack.\nThis Code of Conduct is adapted from the Contributor Covenant.\nAccommodation Smith College is committed to providing support services and reasonable accommodations to all students with disabilities. To request an accommodation, please register with the Office of Disability Services Office (ODS) at the beginning of the semester.\nGrading Standards-Based Grading This course will be graded using a standards-based grading system. Rather than tallying up the percentage of questions you answer correctly, I assess your responses by using a pre-defined set of course standards and then assign a level of proficiency. Throughout the semester, this course offers multiple opportunities to showcase the depth of your understanding in light of these standards.\nIn traditional points-style grading, an average is taken of all your assignments, and your final grade is based on that average. This means all assignments are given equal consideration in your final grade.\nMean of\nA1-A5 In contrast, standards-based grading is focused on your progression through the course. Functionally, only your best score for each standard is kept. All others are effectively forgotten. The hope is that without the worry of \u0026ldquo;getting a bad grade\u0026rdquo; when you are new to a concept, you will feel free to safely engage with complicated topics early on, make mistakes, and have opportunities to show improvement without penalization.\nMax of\nA1-A5 A standards-based grading system carries a number of other benefits:\nLearning targets for the course are clearly defined from the outset. Every graded assignment is directly tied to at least one standard. There is no \u0026ldquo;busy work\u0026rdquo; with a standards-based system. No single assignment will make-or-break your grade. You have multiple opportunities to demonstrate fluency in a standard. This rewards students that take the time to practice and learn from their mistakes. It prioritizes student growth throughout the course of the semester. Assessments in a standards-based system are much clearer than in a point-based grading system. Saying that I\u0026rsquo;ve become proficient in data wrangling, joining, and visualizing means more than saying that I earned a 92.5 in my Introduction to Data Science course. A standards-based grading system makes it easier to monitor your own progress towards a certain grade. There is no competition and no curve in a standards-based system. The only person you are ever compared with is your past self. Help each other often and freely. Standards The following table lists all the standards you are evaluated on in this course. There are 15 total standards, separated into 4 categories. Each standard states what conditions must be met to reach each proficiency level. There are four proficiency levels for each standard, each requiring more complete understanding of the material. These levels are inclusive, meaning to reach the 4th level, \u0026ldquo;Exceeds Standard\u0026rdquo; you must also meet all the requirements of level 3, \u0026ldquo;Meets Standard.\u0026rdquo;\nYou will have multiple opportunities to demonstrate your understanding of each standard. Any assignment that is reviewed is an opportunity to increase your proficiency level in a standard. In addition to the four levels of proficiency, there is also an extra point available in each standard called \u0026ldquo;Individual Standard.\u0026rdquo; You may fulfill this requirement only on quizzes, but only need to reach the \u0026ldquo;Meets Standard\u0026rdquo; criteria on a standard to do so.\nYou can demonstrate proficiency in any reviewed assignment, but can only fulfill the \u0026ldquo;Individual Standard\u0026rdquo; criteria on a quiz.\nStandard Does Not Meet Standard Progressing Toward Standard Meets Standard Exceeds Standard Individual Standard Data Importing Cannot import data or uses R Studio visual tools to import data. Manually organizes or modifies data before importing it into R. Can import raw data into R using the appropriate function for the data source. Can interface with APIs or other remote sources and import data directly into R. Data Cleaning Cleans data in a non-programmatic way. Can clean data programmatically on a cell-by-cell basis to prepare it for analysis. Can assign the correct common data types (logical, integer, numeric, factor, and string) to loaded data and understand the uses of each. Can clean data for analysis in a vectorized way. Can prepare data for advanced types (dates, time series, etc.). Can prepare data from non-traditional sources such as OCR or web scraping. Data Reshaping Formats data in a non-programmatic way. Can derive new measures from existing data and append it to dataframes. Can pivot data between wide and long formats, and can explain the use case of each. Can transition data between data frames and lists, and explain the applications of data in a list format. Data Aggregation \u0026amp; Subsetting Transforms data in a non-programmatic way. Creates multiple copies of data in several intermediate stages of transformation that are used for different steps of analysis. Can combine and split data sets using the appropriate merge or subset techniques. Can split or merge data sets using either SQL-like calls or approximate matching. Functions Copies-and-pastes similar code with small changes. Creates simple functions with consistent inputs. Creates simple functions that can handle novel inputs, with logic to handle the data appropriately. Creates complex functions that can handle arbitrary input. Includes built in error checking and warnings. Iteration Copies-and-pastes similar code several times within or between scripts. Uses for loops or apply functions to iterate through vector data to preform a single data manipulation. Can use either loops or apply functions to iterate over a vector of data and preform multi-step manipulations. Can use loops or apply functions and explain the use cases for each. Can iterate over complex data structures such as dataframes or lists. Visualization Structure Selects inappropriate formats for data visualization. Selects sub-optimal visualization formats or uses excessive visualizations where a single one would be sufficient. Selects suitable formats for data visualization (bar, line, boxplot, etc.) and can explain the reasoning behind that choice. Effectively mixes visualization formats or isolates individual elements to clearly communicate a message. Visualization Aesthetics Chooses visual cues and colors for purely aesthetic reasons without attention to data representation. Data visualizations attempt to represent underlying data, but use methods unsuited to the task which leave ambiguity for the viewer. Data visualizations use color, scale, and shapes effectively to differentiate and communicate underlying data. Data visualizations are highly customized with bespoke elements, such as callouts, to clearly communicate the message of the visualization. Aesthetics are sensitive to accessibility concerns. Visualization Context Produces data visualizations that are unclear, confusing, devoid of context, or impossible to understand without reading the text. Produces data visualizations with readable axis labels, units, and legends (where appropriate). Produces data visualizations that are clear and understandable with minimal text captions. Produces data visualizations that are self-contained and can be understood on their own without textual explanation. Data Ethics Does not consider data ethics or investigate data provenance. Can articulate common pitfalls and relate them to the project at hand. Confirms data types and scales using data documentation. Reads data documentation to understand data collection/generation and measurements. Can highlight potential concerns specific to the data or project. Either creates data documentation for used data, or includes notes in code to the data sources and explains potential pitfalls. Considers and articulates relevant concerns related to the current project unprompted throughout the work cycle. Code Style Code style is inconsistent and/or lacks documentation. Code comments explain the broad strokes of intended behavior. Indentation is consistent and predictable. Uses print statements to track the status of code execution. Consistently comments all code with clearly organized sections. Expected inputs and outputs are clearly explained. Uses error messages or print statements within their code to locate the causes of errors and resolve them. Code is clearly commented, with standardized formatting and indentation. Code contains tests which will check for errors, and report those errors if they arise. Git/Github Does not use git for version control. Uses git and GitHub for version control and can contribute to group repositories with commits, pushes, and pulls. Uses git and GitHub effectively. Code commits are of appropriate size and commented well. Can branch and merge repositories while resolving any merge conflicts. Does not include sensitive files in commits. Uses Github effectively for collaboration. Can create issues, ask for review, and merge branches in a manner suitable for a collaborative environment. Final Grades Your completion of these standards are converted into a final letter grade using the following process. Each of the 12 standards will be converted into a four-point scale, with one point available for meeting the \u0026ldquo;Individual Standard\u0026rdquo; on a quiz.\n1 Point. \u0026ldquo;Does Not Meet Standard\u0026rdquo; 2 Points. \u0026ldquo;Progressing Toward Standard\u0026rdquo; 3 Points. \u0026ldquo;Meets Standard\u0026rdquo; 4 Points. \u0026ldquo;Exceeds Standard\u0026rdquo; +1 Point. \u0026ldquo;Individual Standard\u0026rdquo; On this scale, there are 60 points total in the course (12 standards * 5 possible points). I sum the highest level of proficiency you reach in each standard over the course of the semester to arrive at your final score. For example, if someone were to reach \u0026ldquo;Exceeds Standard\u0026rdquo; in all standards, but could never do so on a quiz, they would receive 48 of 60 points (4 points * 12 standards). Similarly, if someone reaches \u0026ldquo;Meets Standard\u0026rdquo; in all topics, including on quizzes, but did not reach \u0026ldquo;Exceeds Standard\u0026rdquo; in any topic, they would likewise receive 48 of 60 points.\nThe summed points will be converted into letter grades using the following table.\nLetter Points A 57-60 A- 54-56 B+ 52-53 B 50-51 B- 48-49 C+ 46-47 C 44-45 C- 42-43 D+ 40-41 D 38-39 D- 36-37 F 0-35 Late Work Policy Assignments turned in late will not be reviewed, and will not be considered for demonstrating proficiency in course standards. Keep in mind, missing an assignment will not hurt your grade, but does remove one chance for you to demonstrate your knowledge of course material. If you do not think you will be able to turn in an assignment by the deadline, you may request an extension. To do so, please send me a message explaining why you are unable to complete the assignment in the expected time frame. Extension requests must be made\u0026ndash;and accepted\u0026ndash;before the assignment due date.\nAfter the due date, late assignments are only reviewed if there are emergency circumstances preventing you from turning the assignment in on time.\nFAQ Q: So if I reach \u0026ldquo;Exceeds Standard\u0026rdquo; and fulfill the individual standard on a quiz for a topic early in the semester, I can just skip those questions for the rest of the class?\nA: Theoretically yes, but I would recommend you answer all questions to make sure you\u0026rsquo;re not letting your knowledge slip.\nIf this is your first course in the SDS department, you also need to enroll in SDS 100.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/install_guide/","title":"Install Guides","tags":[],"description":"","content":" git/GitHub Overview git on Windows git on Mac Overview git is a tool for version control and collaboration. It is the tool used by data science teams big and small to keep track of code. Think of it like track changes in Word or Google docs, but for code files. git on Windows Follow these step-by-step instructions if you\u0026rsquo;re installing Git on a Windows machine: First, launch a web browser, the image below shows the Microsoft Edge browser.\n"},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/class_worksheets/","title":"Worksheets","tags":[],"description":"","content":" "},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/labs/","title":"Labs","tags":[],"description":"","content":" Problem Solving This lab will introduce you to resources and techniques for problem solving in R. You should reference this lab often throughout the semester for reminders on best practices for addressing errors and getting help.\n"},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/slides/","title":"Slides","tags":[],"description":"","content":" Lecture Slides .placeholder (0 B) "},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/credits/","title":"Credits","tags":[],"description":"","content":"Content Thank you to Dr. Lindsay Poirier and Dr. Ben Baumner for providing their materials as reference as I prepared this course reader.\nBackend Thanks to the Hugo projects for providing the infrastructure for this site. Thank you to the team that created Hugo Learn Theme, the basis of this reader.\nPackages and libraries mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support "},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/","title":"Intro to Data Science","tags":[],"description":"","content":" Intro to Data Science Quick Links Resource Link Description Syllabus Quick access to all important course information. Moodle Grades and quizzes will be available on the course Moodle. Slack Main communication channel for the course. Perusall Perusall page for course readings Spinelli Center The Spinelli Center offers drop-in tutoring hours in Sabin-Reed 301 or on Zoom. Overview Info Value Who Dr. Jared Joseph What SDS 192-03: Introduction to Data Science When Mondays 1:40-2:55pm; Wednesday/Friday 1:20-2:35pm Where Stoddard G2 Schedule Below is the tentative schedule for the course. While we will try to keep to this schedule, unanticipated situations (and mountain day) may require us to adjust. Each row is a class meeting, with the readings and assignments due on that day listed.\nWeek Date Topic Readings Due 1 9/5/2022 (Mon) No Class 1 9/7/2022 (Wed) Introduction 1 9/9/2022 (Fri) What is Data? Class Syllabus Kitchin, R., \u0026amp; Lauriault, T. P. (2018). Toward Critical Data Studies: Charting and Unpacking Data Assemblages and Their Work. in J. Thatcher, J. Eckert, \u0026amp; A. Shears (Eds.), Thinking Big Data in Geography: New Regimes, New Research (pp. 3-20). University of Nebraska Press. Welcome Survey Data Survey Install Slack and join the class workspace 2 9/12/2022 (Mon) Install Day 2 9/14/2022 (Wed) Intro to R/R Studio Irizarry, R. A. (2022). Chapter 2 R basics | Introduction to Data Science. In Introduction to Data Science. All Software Installed 2 9/16/2022 (Fri) LAB 1 3 9/19/2022 (Mon) Intro to git/GitHub Bryan, J. (2018). Excuse Me, Do You Have a Moment to Talk About Version Control? American Statistician, 72(1), 20-27. 3 9/21/2022 (Wed) Exploratory Data Analyses Irizarry, R. A. (2022). Chapter 12 Robust summaries. In Introduction to Data Science. [PAGES 3-12] Grant, R. (2019). Why visualize? in Data Visualization: Charts, Maps, and Interactive Graphics. Chapman and Hall/CRC. Holtz, Y., \u0026amp; Healy, C. (2018). The issue with pie chart in From data to Viz. Holtz, Y., \u0026amp; Healy, C. (2018). Venn Diagram in From data to Viz. Holtz, Y., \u0026amp; Healy, C. (2018). Line chart in From data to Viz. Holtz, Y., \u0026amp; Healy, C. (2018). Barplot in From data to Viz. Holtz, Y., \u0026amp; Healy, C. (2018). Scatter plot in From data to Viz. Holtz, Y., \u0026amp; Healy, C. (2018). Histogram in From data to Viz. Holtz, Y., \u0026amp; Healy, C. (2018). The Boxplot and its pitfalls in From data to Viz. Lab 1 Problem solving lab 3 9/23/2022 (Fri) LAB 2 4 9/26/2022 (Mon) Tidy Data/Long-Wide [Section 6.1-6.3] Baumer, B. S., Kaplan, D. T., \u0026amp; Horton, N. J. (2021). Chapter 6 Tidy data. In Modern Data Science with R. CNC Press. 4 9/28/2022 (Wed) Aggregation and Merging Ismay, C., \u0026amp; Kim, A. Y. (2022). Chapter 3 Data Wrangling. In Statistical Inference via Data Science. CNC Press. [PAGES 1701-1731] Ohm, P. (2009). Broken Promises of Privacy: Responding to the Surprising Failure of Anonymization (SSRN Scholarly Paper No. 1450006). Lab 2 4 9/30/2022 (Fri) LAB 3/Quiz 1 Open 5 10/3/2022 (Mon) Advanced Plotting Reynolds, P. (2021). 5 Principles of Visual Perception in Principles of Data Visualization. Irizarry, R. A. (2022). Chapter 8 ggplot2 | Introduction to Data Science. In Introduction to Data Science. Leo, S. (2019, March 27). Mistakes, weve drawn a few. Medium. 5 10/5/2022 (Wed) Interactive Plotting Scroll through Spurious Correlations Explore U.S. Gun Deaths Sievert, C. (2019). 1 Preface. In Interactive web-based data visualization with R, plotly, and shiny. Holtz, Y. (2018). Interactive charts | the R Graph Gallery. Lab 3 5 10/7/2022 (Fri) LAB 4 Quiz 1 6 10/10/2022 (Mon) No Class 6 10/12/2022 (Wed) Data Science Ethics Baumer, B. S., Kaplan, D. T., \u0026amp; Horton, N. J. (2021). Chapter 8 Data science ethics. In Modern Data Science with R. CNC Press. Lab 4 6 10/14/2022 (Fri) Project 1 7 10/17/2022 (Mon) Functions Grolemund, G., \u0026amp; Wickham, H. (2017). 19 Functions. In R for Data Science. O\u0026lt;92\u0026gt;Reilly. 7 10/19/2022 (Wed) R Debugging Tools Bryan, J., \u0026amp; Hester, J. (2021). Chapter 11 Debugging R code. In What They Forgot to Teach You About R. 7 10/21/2022 (Fri) LAB 5 8 10/24/2022 (Mon) Iteration Wickham, H., \u0026amp; Grolemund, G. (2017). 21 Iteration. In R for Data Science. O'Reilly. 8 10/26/2022 (Wed) Parallelization Peng, R. D. (2022). 22 Parallel Computation. In R Programming for Data Science. Lab 5 8 10/28/2022 (Fri) LAB 6/Quiz 2 Open Project 1 9 10/31/2022 (Mon) Bash Irizarry, R. A. (2022). Chapter 39 Organizing with Unix. In Introduction to Data Science. 9 11/2/2022 (Wed) Advanced git/GitHub Lab 6 9 11/4/2022 (Fri) LAB 7 Quiz 2 10 11/7/2022 (Mon) Data Cleaning de Jonge, E., \u0026amp; van der Loo, M. (2013). An introduction to data cleaning with R. Rue, J., \u0026amp; Hernandez, R. K. (2019). Using OpenRefine to Clean Your Data. Berkeley Advanced Media Institute. 10 11/9/2022 (Wed) Recap Lab 7 10 11/11/2022 (Fri) Project 2 11 11/14/2022 (Mon) Remote Servers \u0026amp; APIs 11 11/16/2022 (Wed) Web Scraping Irizarry, R. A. (2022). Chapter 24 Web scraping. In Introduction to Data Science. Zimmer, M. (2010). 'But the data is already public': On the ethics of research in Facebook. Ethics and Information Technology, 12(4), 313\u0026lt;96\u0026gt;325. 11 11/18/2022 (Fri) LAB 8/Quiz 3 Open 12 11/21/2022 (Mon) SQL Project 2 12 11/23/2022 (Wed) No Class Lab 8 12 11/25/2022 (Fri) No Class Quiz 3 13 11/28/2022 (Mon) Finals Planning 13 11/30/2022 (Wed) Text as Data Clark, M. (2018). String Theory. In An Introduction to Text Processing and Analysis with R. Peng, R. D. (2022). 17 Regular Expressions. In R Programming for Data Science. 13 12/2/2022 (Fri) Geospatial Data/Quiz 4 Open Baumer, B. S., Kaplan, D. T., \u0026amp; Horton, N. J. (2021). Chapter 17 Working with geospatial data. In Modern Data Science with R. CNC Press. de Montjoye, Y.-A., Hidalgo, C. A., Verleysen, M., \u0026amp; Blondel, V. D. (2013). Unique in the Crowd: The privacy bounds of human mobility. Scientific Reports, 3(1), 1376. Deluca, E., \u0026amp; Nelson, S. (2017). 7. Lying With Maps. In Mapping, Society, and Technology. University of Minnesota Libraries Publishing. 14 12/5/2022 (Mon) Networks as Data [Chapters 1-2] Kadushin, C. (2012). Understanding Social Networks: Theories, Concepts, and Findings. Oxford University Press. 14 12/7/2022 (Wed) Mountain Day Saftey Net/Lessons Learned 14 12/9/2022 (Fri) Finals Work Quiz 4 15 12/12/2022 (Mon) Finals Presentations/aRt Gallery "},{"uri":"https://intro-to-data-science-template.github.io/intro_to_data_science_reader/tags/","title":"Tags","tags":[],"description":"","content":""}]